name: SmartLipad CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Code Quality Checks
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Check code formatting with Black
      run: black --check backend/ tests/
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/ --count --max-complexity=10 --max-line-length=120 --statistics
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: isort --check-only backend/ tests/
      continue-on-error: true

  # Testing Matrix
  test:
    name: Tests (Python 3.11)
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
    
    services:
      mariadb:
        image: mariadb:11.2
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test_smartlipad
          MYSQL_USER: test_user
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmariadb-dev libmariadb-dev-compat
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env
      shell: bash
    
    - name: Run unit tests
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: test_user
        DB_PASSWORD: testpass
        DB_NAME: test_smartlipad
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        SECRET_KEY: test_secret_key_for_ci_only
      run: |
        pytest tests/ -v -m "not slow" --cov=backend --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: test_user
        DB_PASSWORD: testpass
        DB_NAME: test_smartlipad
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        SECRET_KEY: test_secret_key_for_ci_only
      run: |
        pytest tests/ -v -m "integration" --cov=backend --cov-append --cov-report=xml
      continue-on-error: true
  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check dependencies for vulnerabilities
      run: safety check --json
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: bandit -r backend/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json
      if: always()

  # Docker Build Test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: smartlipad-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm smartlipad-backend:test python --version

  # Coverage Report
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
      continue-on-error: true
    
    - name: Comment coverage on PR
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
      continue-on-error: true

  # Database Migration Test
  migration:
    name: Database Migration Test
    runs-on: ubuntu-latest
    
    services:
      mariadb:
        image: mariadb:11.2
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test_smartlipad
          MYSQL_USER: test_user
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sqlalchemy pymysql alembic
    
    - name: Test database initialization
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: test_user
        DB_PASSWORD: testpass
        DB_NAME: test_smartlipad
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python backend/scripts/init_db.py
      continue-on-error: true

  # Notification on Success
  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker]
    if: success()
    
    steps:
    - name: Send success notification
      run: echo "All CI checks passed successfully!"
